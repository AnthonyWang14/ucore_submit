--- default_sched__res.c	2016-03-26 21:40:08.899194616 +0800
+++ default_sched_stride_lab6__c	2016-03-26 21:10:34.739156000 +0800
 
 /*
@@ -51,20 +57,28 @@
  *
  * proc->time_slice denotes the time slices allocation for the
  * process, which should set to rq->max_time_slice.
- * 
- * hint: see proj13.1/libs/skew_heap.h for routines of the priority
+ *
+ * hint: see libs/skew_heap.h for routines of the priority
  * queue structures.
  */
 static void
 stride_enqueue(struct run_queue *rq, struct proc_struct *proc) {
-     /* LAB6: YOUR CODE */
-     rq->lab6_run_pool =
-          skew_heap_insert(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
-     if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
-          proc->time_slice = rq->max_time_slice;
-     }
-     proc->rq = rq;
-     rq->proc_num ++;
+     /* LAB6: 2013011356
+      * (1) insert the proc into rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_insert: insert a entry into skew_heap
+      *         list_add_before: insert  a entry into the last of list
+      * (2) recalculate proc->time_slice
+      * (3) set proc->rq pointer to rq
+      * (4) increase rq->proc_num
+      */
+    rq->lab6_run_pool = skew_heap_insert(
+        rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
+        proc->time_slice = rq->max_time_slice;
+    }
+    proc->rq = rq;
+    rq->proc_num ++;
 }
 
 /*
@@ -72,38 +86,53 @@
  * ``rq'', the operation would be finished by the skew_heap_remove
  * operations. Remember to update the ``rq'' structure.
  *
- * hint: see proj13.1/libs/skew_heap.h for routines of the priority
+ * hint: see libs/skew_heap.h for routines of the priority
  * queue structures.
  */
 static void
 stride_dequeue(struct run_queue *rq, struct proc_struct *proc) {
-     /* LAB6: YOUR CODE */
-     rq->lab6_run_pool =
-          skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
-     rq->proc_num --;
+     /* LAB6: YOUR CODE
+      * (1) remove the proc from rq correctly
+      * NOTICE: you can use skew_heap or list. Important functions
+      *         skew_heap_remove: remove a entry from skew_heap
+      *         list_del_init: remove a entry from the  list
+      */
+    rq->lab6_run_pool = skew_heap_remove(rq->lab6_run_pool, &(proc->lab6_run_pool), proc_stride_comp_f);
+    // proc->rq = NULL;
+    rq->proc_num --;
 }
 /*
  * stride_pick_next pick the element from the ``run-queue'', with the
  * minimum value of stride, and returns the corresponding process
  * pointer. The process pointer would be calculated by macro le2proc,
- * see proj13.1/kern/process/proc.h for definition. Return NULL if
+ * see kern/process/proc.h for definition. Return NULL if
  * there is no process in the queue.
  *
  * When one proc structure is selected, remember to update the stride
  * property of the proc. (stride += BIG_STRIDE / priority)
  *
- * hint: see proj13.1/libs/skew_heap.h for routines of the priority
+ * hint: see libs/skew_heap.h for routines of the priority
  * queue structures.
  */
 static struct proc_struct *
 stride_pick_next(struct run_queue *rq) {
-     /* LAB6: YOUR CODE */
-     if (rq->lab6_run_pool == NULL) return NULL;
-     struct proc_struct *p = le2proc(rq->lab6_run_pool, lab6_run_pool);
-     if (p->lab6_priority == 0)
-          p->lab6_stride += BIG_STRIDE;
-     else p->lab6_stride += BIG_STRIDE / p->lab6_priority;
-     return p;
+     /* LAB6: 2013011356
+      * (1) get a  proc_struct pointer p  with the minimum value of stride
+             (1.1) If using skew_heap, we can use le2proc get the p from rq->lab6_run_pool
+             (1.2) If using list, we have to search list to find the p with minimum stride value
+      * (2) update p;s stride value: p->lab6_stride
+      * (3) return p
+      */
+    // assert(rq != NULL);
+    if (rq->lab6_run_pool == NULL) {
+        return NULL;
+    } else {
+        struct proc_struct *proc = le2proc(rq->lab6_run_pool, lab6_run_pool);
+        assert (proc->lab6_priority > 0);
+        proc->lab6_stride += BIG_STRIDE / proc->lab6_priority;
+        // cprintf("next is pid %d, stride is %d, priority is %d\n", proc->pid, proc->lab6_stride, proc->lab6_priority);
+        return proc;
+    }
 }
 
 /*
@@ -116,12 +145,13 @@
  */
 static void
 stride_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
-     if (proc->time_slice > 0) {
-          proc->time_slice --;
-     }
-     if (proc->time_slice == 0) {
-          proc->need_resched = 1;
-     }
+     /* LAB6: 2013011356 */
+    if (proc->time_slice > 0) {
+        proc->time_slice --;
+    } else {
+        proc->time_slice = 0;
+        proc->need_resched = 1;
+    }
 }
 
 struct sched_class default_sched_class = {
@@ -132,4 +162,3 @@
      .pick_next = stride_pick_next,
      .proc_tick = stride_proc_tick,
 };
-
